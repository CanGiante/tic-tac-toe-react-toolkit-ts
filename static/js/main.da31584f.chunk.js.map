{"version":3,"sources":["helpers/helpers.tsx","app/gameSlice.ts","hooks/hooks.ts","components/Square.tsx","components/Board.tsx","app/Game.tsx","store.ts","index.tsx"],"names":["calculateWinner","squares","lines","i","length","a","b","c","player","line","initialState","history","Array","fill","xIsNext","stepNumber","gameSlice","createSlice","name","reducers","jumpTo","state","action","payload","handleClick","slice","concat","actions","selectGame","game","useAppSelector","useSelector","Square","props","className","onClick","style","backgroundColor","isWinner","value","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","Board","winner","winnerSquares","renderSquare","includes","row1","row2","row3","push","Game","status","dispatch","useDispatch","current","moves","map","step","move","desc","square","store","configureStore","reducer","gameReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da31584f.chunk.js","sourcesContent":["import { ISign } from '../interfaces/interfaces';\n\nexport function calculateWinner(squares: Array<ISign>) {\n\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { player: squares[a], line: [a, b, c] };\n    }\n  }\n\n  return null;\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../store';\nimport { calculateWinner } from '../helpers/helpers';\nimport { GameState } from '../interfaces/interfaces';\n\nconst initialState: GameState = {\n  history: [{ squares: Array(9).fill(null) }],\n  xIsNext: true,\n  stepNumber: 0,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    jumpTo: (state, action) => {\n      state.stepNumber = action.payload;\n      state.xIsNext = action.payload % 2 === 0;\n    },\n    handleClick: (state, action) => {\n      const history = state.history?.slice(0, state.stepNumber + 1);\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n\n      if (calculateWinner(squares) || squares[action.payload]) {\n        return;\n      }\n\n      squares[action.payload] = state.xIsNext ? 'X' : 'O';\n\n      state.history = history.concat([{ squares }]);\n      state.stepNumber = history.length;\n      state.xIsNext = !state.xIsNext;\n    },\n  },\n});\n\nexport const { jumpTo, handleClick } = gameSlice.actions;\n\nexport const selectGame = (state: RootState) => state.game;\n\nexport default gameSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport { IProps } from '../interfaces/interfaces';\n\nexport default function Square(props: IProps) {\n  return (\n    <button\n      className=\"square\"\n      onClick={props.onClick}\n      style={{ backgroundColor: props.isWinner }}\n    >\n      {props.value}\n    </button>\n  );\n}\n","import React from 'react';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { IProps } from '../interfaces/interfaces';\nimport { calculateWinner } from '../helpers/helpers';\nimport Square from './Square';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n\nexport function Board(props: IProps) {\n  const winner = calculateWinner(props.squares);\n  const winnerSquares = winner?.line;\n  const renderSquare = (i: number) => (\n    <Square\n      value={props.squares[i]}\n      onClick={() => props.onClick(i)}\n      key={i}\n      isWinner={winnerSquares?.includes(i) ? theme.palette.primary.light : ''}\n    />\n  );\n\n  const row1 = [];\n  const row2 = [];\n  const row3 = [];\n\n  for (let i = 0; i < 3; i++) {\n    row1.push(renderSquare(i));\n    row2.push(renderSquare(i + 3));\n    row3.push(renderSquare(i + 6));\n  }\n\n  return (\n    <div className=\"board\">\n      <div className=\"board-row\">{row1}</div>\n      <div className=\"board-row\">{row2}</div>\n      <div className=\"board-row\">{row3}</div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport { jumpTo, handleClick, selectGame } from './gameSlice';\nimport { useAppSelector, useAppDispatch } from '../hooks/hooks';\nimport { calculateWinner } from '../helpers/helpers';\nimport Board from '../components/Board';\n\nexport function Game() {\n  const game = useAppSelector(selectGame);\n  const dispatch = useAppDispatch();\n\n  const { history } = game;\n  const current = history[game.stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  const moves = history.map((step: object, move: number) => {\n    const desc = move ? `Got to move #${move}` : 'Go to game start';\n    \n    return (\n      <li key={move}>\n        <button onClick={() => dispatch(jumpTo(move))}>\n          <span>{desc}</span>\n        </button>\n      </li>\n    );\n  });\n\n  let status;\n\n  if (!winner && game.stepNumber === 9) {\n    status = 'draw!';\n  } else if (winner) {\n    status = `winner: ${winner.player}`;\n  } else {\n    status = `next player: ${game.xIsNext ? 'X' : 'O'}`;\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(square: number) => dispatch(handleClick(square))}\n          />\n        </div>\n      </div>\n\n      <div className=\"game-info\">\n        <div className=\"status\">{status}</div>\n        <ol className=\"moves\">{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport gameReducer from './app/gameSlice';\n\nexport const store = configureStore({\n  reducer: {\n    game: gameReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport Game from './app/Game';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Game />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}